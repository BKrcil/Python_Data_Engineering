Objectives
After completing this lab you will be able to:

Use Pandas to load data sets.
Identify the target and features.
Split the dataset into training and testing sets.
Use Linear Regression to build a prediction model.
Use metrics to evaluate the model.
Datasets
In this lab you will be using dataset(s):

Modified version of car mileage dataset. Original dataset available at https://archive.ics.uci.edu/ml/datasets/auto+mpg
Modified version of diamonds dataset. Original dataset available at https://www.openml.org/search?type=data&sort=runs&id=42225&status=active
Setup
For this lab, we will be using the following libraries:

pandas for managing the data.
sklearn for machine learning and machine-learning-pipeline related functions.
Installing Required Libraries
The following required libraries are pre-installed in the Skills Network Labs environment. However, if you run this notebook commands in a different Jupyter environment (e.g. Watson Studio or Ananconda), you will need to install these libraries by removing the # sign before !pip in the code cell below.

# All Libraries required for this lab are listed below. The libraries pre-installed on Skills Network Labs are commented.
# !pip install pandas==1.3.4
# !pip install scikit-learn==0.20.1
# !pip install numpy==1.21.6
# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')
​
Importing Required Libraries
We recommend you import all required libraries in one place (here):

import pandas as pd
from sklearn.linear_model import LinearRegression
​
#import functions for train test split
​
from sklearn.model_selection import train_test_split
​
# import functions for metrics
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from math import sqrt
Task 1 - Load the data in a csv file into a dataframe
# the data set is available at the url below.
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/mpg.csv"
​
# using the read_csv function in the pandas library, we load the data into a dataframe.
​
df = pd.read_csv(URL)
​
Let's look at some sample rows from the dataset we loaded:

# show 5 random rows from the dataset
df.sample(5)
MPG	Cylinders	Engine Disp	Horsepower	Weight	Accelerate	Year	Origin
266	21.6	4	121.0	115	2795	15.7	78	European
105	12.0	8	429.0	198	4952	11.5	73	American
364	28.0	4	112.0	88	2605	19.6	82	American
389	36.0	4	120.0	88	2160	14.5	82	Japanese
60	13.0	8	350.0	165	4274	12.0	72	American
Let's find out the number of rows and columns in the dataset:

df.shape
(392, 8)
Let's create a scatter plot of Weight versus mileage(MPG) . This will help us visualize the relationship between them.

df.plot.scatter(x = "Weight", y = "MPG")
<AxesSubplot:xlabel='Weight', ylabel='MPG'>

You are encouraged to create more plots to visualize relationships amongst other columns

Task 2 - Identify the target column and the data columns
First we identify the target. Target is the value that our machine learning model needs to predict

y = df["MPG"] # y is the target
We identify the features next. Features are the values our machine learning model learns from

X = df[["Horsepower","Weight"]] # X is the set of features
Task 3 - Split the data set
We split the data set in the ratio of 70:30. 70% training data, 30% testing data.

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)
The random_state variable controls the shuffling applied to the data before applying the split. Pass the same integer for reproducible output across multiple function calls

Task 4 - Build and Train a Linear Regression Model
Create a LR model

lr = LinearRegression()
Train/Fit the model using the training data set

lr.fit(X_train,y_train)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,
         normalize=False)
Task 5 - Evaluate the model
Your model is now trained. We use the testing data to evaluate the model.

lr.score(X_test, y_test)
0.7691968626070727
To compute the detailed metrics we need two values, the original mileage and the predicted mileage.

original_values = y_test
predicted_values = lr.predict(X_test)
R Squared
r2_score(original_values, predicted_values) # Higher the value the better the model
0.7691968626070727
Mean Squared Error
mean_squared_error(original_values, predicted_values) # Lower the value the better the model
12.212748938323992
Root Mean Squared Error
sqrt(mean_squared_error(original_values, predicted_values)) # Lower the value the better the model
3.4946743679953918
Mean Absolute Error
mean_absolute_error(original_values, predicted_values) # Lower the value the better the model
2.853067881509254
Exercises
URL2 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/diamonds.csv"
Exercise 1 - Loading a dataset (diamond dataset)
df2 =pd.read_csv(URL2)

Exercise 2 - Identify the target column and the data columns
Use the price column as target
Use the columns carat, depth and table as features
y = df2["price"]
X = df2[["carat","depth","table"]]

Exercise 3 - Split the data
Split the dataset into training and testing sets. Make 25% of the data as testing set. Use 42 as random state.

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

Exercise 4 - Predict values
lr2 = LinearRegression()
lr2.fit(X_train, y_train)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,
         normalize=False)
Predict the values using the test data.


original_values = y_test
predicted_values = lr2.predict(X_test)

Exercise 5 - Evaluate the model
Print the metrics :

R squared
mean absolute error
mean squared error
root mean squared error
#your code goes here
print(r2_score(original_values, predicted_values))
print(mean_absolute_error(original_values, predicted_values))
print(mean_squared_error(original_values, predicted_values))
print(sqrt(mean_squared_error(original_values, predicted_values)))
0.8529493985221452
991.8625215830598
2310119.6354749133
1519.9077720292482
