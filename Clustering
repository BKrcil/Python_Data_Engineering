bjectives¶
After completing this lab you will be able to:

Use Pandas to load data sets.
Use K Means algorithm to cluter the data.
Datasets
In this lab you will be using dataset(s):

Modified version of Wholesale customers dataset. Original dataset available at https://archive.ics.uci.edu/ml/datasets/Wholesale+customers
Seeds dataset. Available at https://archive.ics.uci.edu/ml/datasets/seeds
Setup
For this lab, we will be using the following libraries:

pandas for managing the data.
sklearn for machine learning and machine-learning-pipeline related functions.
Installing Required Libraries
The following required libraries are pre-installed in the Skills Network Labs environment. However, if you run this notebook commands in a different Jupyter environment (e.g. Watson Studio or Ananconda), you will need to install these libraries by removing the # sign before !pip in the code cell below.

# All Libraries required for this lab are listed below. The libraries pre-installed on Skills Network Labs are commented.
# !pip install pandas==1.3.4
# !pip install scikit-learn==0.20.1
​
The following required libraries are not pre-installed in the Skills Network Labs environment. You will need to run the following cell to install them:

Importing Required Libraries
We recommend you import all required libraries in one place (here):

# You can also use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')
​
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
Clustering demo with generated sample data
# Generate sample data for clustering
X, y = make_blobs(n_samples=300, centers=4, cluster_std=0.6, random_state=0)
​
# X now contains 300 rows of data spread across 4 clusters that was generated by the make_blobs function.
# In real life we would use an existing data set.
# Apply k-means clustering
kmeans = KMeans(n_clusters=4)
kmeans.fit(X)
KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
    n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
    random_state=None, tol=0.0001, verbose=0)
# Print cluster centers
kmeans.cluster_centers_
array([[ 1.98258281,  0.86771314],
       [-1.37324398,  7.75368871],
       [ 0.94973532,  4.41906906],
       [-1.58438467,  2.83081263]])
# Plot the clusters and cluster centers
plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='*', s=400, color='black')
plt.show()

End of Demo

Examples
Task 1 - Load the data in a csv file into a dataframe
# the data set is available at the url below.
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/customers.csv"
​
# using the read_csv function in the pandas library, we load the data into a dataframe.
​
df = pd.read_csv(URL)
Let's look at some sample rows from the dataset we loaded:

# show 5 random rows from the dataset
df.sample(5)
Fresh_Food	Milk	Grocery	Frozen_Food
392	518	4180	3600	659
170	260	8675	13430	1116
288	16260	594	1296	848
67	19913	6759	13462	1256
364	2615	873	1524	1103
Let's find out the number of rows and columns in the dataset:

df.shape
(440, 4)
Let's plot the histograms of all columns

df.hist()
array([[<AxesSubplot:title={'center':'Fresh_Food'}>,
        <AxesSubplot:title={'center':'Milk'}>],
       [<AxesSubplot:title={'center':'Grocery'}>,
        <AxesSubplot:title={'center':'Frozen_Food'}>]], dtype=object)

Task 2 - Decide how many clusters to create
You must tell the KMeans algorithm how many clusters to create out of your data

number_of_clusters = 3
Task 3 - Create a clustering model
Create a KMeans clustering model

cluster = KMeans(n_clusters = number_of_clusters)
Train the model on the dataset

result = cluster.fit_transform(df)
Your model is now trained. Print cluster centers

cluster.cluster_centers_
array([[ 8119.69387755, 18812.93877551, 27745.36734694,  2011.42857143],
       [ 8234.99093656,  3824.33836858,  5322.42296073,  2568.73716012],
       [35941.4       ,  6044.45      ,  6288.61666667,  6713.96666667]])
Task 4 - Make Predictions
Make the predictions and save them into the column "cluster_number"

df['cluster_number'] = cluster.predict(df)
df.sample(5)
Fresh_Food	Milk	Grocery	Frozen_Food	cluster_number
124	36050	1642	2961	4787	2
233	964	4984	3316	937	1
8	5963	3648	6192	425	1
103	56082	3504	8906	18028	2
173	514	7677	19805	937	0
Print the cluster numbers and the number of customers in each cluster

df.cluster_number.value_counts()
Exercises
Exercise 1 - Load the data in a csv file into a dataframe
URL2 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/seeds.csv"
​
Load the seeds dataset available at URL2


df2 = pd.read_csv(URL2)
Exercise 2 - Decide how many clusters to create
Cluster the data into 4 clusters

number_of_clusters = 4

Exercise 3 - Create a clustering model
Create a clustering model and train it using the data in the dataframe


cluster = KMeans(n_clusters = number_of_clusters)
result = cluster.fit_transform(df2)

print(cluster.cluster_centers_)
[[18.96296296 16.39666667  0.88595185  6.24272222  3.74992593  3.54033333
   6.10077778]
 [13.39108696 13.86521739  0.87424565  5.366       3.11428261  2.41580652
   4.99067391]
 [11.91439394 13.26151515  0.85024242  5.23122727  2.86393939  5.06828788
   5.10534848]
 [15.71909091 14.97659091  0.88038636  5.74518182  3.3985      3.18704773
   5.44838636]]
Exercise 4 - Make Predictions
Make the predictions and save them into the column "cluster_number"

#your code goes here
df2['cluster_number'] = cluster.predict(df2)

df2.sample(5)
area	perimeter	compactness	length of kernel	width of kernel	asymmetry coefficient	length of kernel groove	cluster_number
129	17.55	15.66	0.8991	5.791	3.690	5.366	5.661	0
149	10.79	12.93	0.8107	5.317	2.648	5.462	5.194	2
206	11.23	12.88	0.8511	5.140	2.795	4.325	5.003	2
19	12.72	13.57	0.8686	5.226	3.049	4.102	4.914	2
185	11.56	13.31	0.8198	5.363	2.683	4.062	5.182	2
Print the cluster numbers and the number of seeds in each cluster







#your code goes here
df2.cluster_number.value_counts()
2    66
0    54
1    46
3    44
Name: cluster_number, dtype: int64
