Objectives¶
After completing this lab you will be able to:

Use Pandas to load data sets.
Identify the target and features.
Use Logistic Regression to build a classifier.
Use metrics to evaluate the model.
Make predictions using a trained model.
Datasets
In this lab you will be using dataset(s):

Modified version of iris dataset. Original dataset available at https://archive.ics.uci.edu/ml/datasets/Iris
Modified version of Breast Cancer dataset. Original dataset available at https://archive.ics.uci.edu/dataset/17/breast+cancer+wisconsin+diagnostic
Setup
For this lab, we will be using the following libraries:

pandas for managing the data.
sklearn for machine learning and machine-learning-pipeline related functions.
Installing Required Libraries
The following required libraries are pre-installed in the Skills Network Labs environment. However, if you run this notebook commands in a different Jupyter environment (e.g. Watson Studio or Ananconda), you will need to install these libraries by removing the # sign before !pip in the code cell below.

## All Libraries required for this lab are listed below. The libraries pre-installed on Skills Network Labs are commented.
# !pip install pandas==1.3.4
# !pip install scikit-learn==0.20.1
​
The following required libraries are not pre-installed in the Skills Network Labs environment. You will need to run the following cell to install them:

Importing Required Libraries
We recommend you import all required libraries in one place (here):

# You can also use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')
​
import pandas as pd
from sklearn.linear_model import LogisticRegression
Task 1 - Load the data in a csv file into a dataframe
# the data set is available at the url below.
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/iris.csv"
​
# using the read_csv function in the pandas library, we load the data into a dataframe.
​
df = pd.read_csv(URL)
Let's look at some sample rows from the dataset we loaded:

# show 5 random rows from the dataset
df.sample(5)
SepalLengthCm	SepalWidthCm	PetalLengthCm	PetalWidthCm	Species
69	5.6	2.5	3.9	1.1	Iris-versicolor
41	4.5	2.3	1.3	0.3	Iris-setosa
47	4.6	3.2	1.4	0.2	Iris-setosa
84	5.4	3.0	4.5	1.5	Iris-versicolor
64	5.6	2.9	3.6	1.3	Iris-versicolor
Let's find out the number of rows and columns in the dataset:

df.shape
(150, 5)
Let's plot the types and count of species

df.Species.value_counts().plot.bar()
<AxesSubplot:>

You can see that there are 3 species and 50 flowers for each type of species.

Task 2 - Identify the target column and the data columns
First we identify the target. Target is the value that our machine learning model needs to classify

target = df["Species"]
We identify the features next. Features are the input values our machine learning model learns from

features = df[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]]
Task 3 - Build and train a classifier
Create a Logistic Regression model

classifier = LogisticRegression()
Train/Fit the model

classifier.fit(features,target)
LogisticRegression()
Task 4 - Evaluate the model
Your model is now trained. Time to evaluate the model.

#Higher the score, better the model.
classifier.score(features,target)
0.9733333333333334
Make predictions. Let us predict the species of a flower with SepalLengthCm = 5.4, SepalWidthCm = 2.6, PetalLengthCm = 4.1, PetalWidthCm = 1.3

classifier.predict([[5.4,2.6,4.1,1.3]])
array(['Iris-versicolor'], dtype=object)
# it should be a Iris-versicolor 


Exercises
URL2 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/cancer.csv"
​
Exercise 1 - Load a dataset
Load the cancer dataset available at URL2


df2 =pd.read_csv(URL2)

Exercise 2 - Identify the target column and the data columns
use the diagnosis column as target
use all the other columns except diagnosis as features


target = df2["diagnosis"]
features = df2[['radius_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean', 'symmetry_mean']]


​

​
Exercise 3 - Build and Train a new classifier
Create a new Classifier


classifier2 = LogisticRegression()
classifier2.fit(features,target)
LogisticRegression()

Exercise 4 - Evaluate the model
Print the score of the model


classifier2.score(features,target)

0.8963093145869947

Exercise 5 - Find out if a tumor is cancerous
Classify the tumor with

'radius_mean' = 13.45, 'perimeter_mean'= 86.6, 'area_mean' = 555.1, 'smoothness_mean' = 0.1022, 'compactness_mean' = 0.08165, 'concavity_mean' = 0.03974, 'symmetry_mean' = 0.1638







#your code goes here
classifier2.predict([[13.45,86.6,555.1,0.1022,0.08165,0.03974,0.1638]])


array(['Benign'], dtype=object)
